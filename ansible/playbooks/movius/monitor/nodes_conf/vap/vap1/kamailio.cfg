#!KAMAILIO
#
# Kamailio (OpenSER) SIP Server v3.2 - default configuration script
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: <sr-users@lists.sip-router.org>
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode: 
#     - define WITH_DEBUG
#
# *** To enable mysql: 
#     - define WITH_MYSQL
#
# *** To enable authentication execute:
#     - enable mysql
#     - define WITH_AUTH
#     - add users using 'kamctl'
#
# *** To enable IP authentication execute:
#     - enable mysql
#     - enable authentication
#     - define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table
#
# *** To enable persistent user location execute:
#     - enable mysql
#     - define WITH_USRLOCDB
#
# *** To enable presence server execute:
#     - enable mysql
#     - define WITH_PRESENCE
#
# *** To enable nat traversal execute:
#     - define WITH_NAT
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722
#
# *** To enable PSTN gateway routing execute:
#     - define WITH_PSTN
#     - set the value of pstn.gw_ip
#     - check route[PSTN] for regexp routing condition
#
# *** To enable database aliases lookup execute:
#     - enable mysql
#     - define WITH_ALIASDB
#
# *** To enable speed dial lookup execute:
#     - enable mysql
#     - define WITH_SPEEDDIAL
#
# *** To enable multi-domain support execute:
#     - enable mysql
#     - define WITH_MULTIDOMAIN
#
# *** To enable TLS support execute:
#     - adjust CFGDIR/tls.cfg as needed
#     - define WITH_TLS
#
# *** To enable XMLRPC support execute:
#     - define WITH_XMLRPC
#     - adjust route[XMLRPC] for access policy
#
# *** To enable anti-flood detection execute:
#     - adjust pike and htable=>ipban settings as needed (default is
#       block if more than 16 requests in 2 seconds and ban for 300 seconds)
#     - define WITH_ANTIFLOOD
#
# *** To block 3XX redirect replies execute:
#     - define WITH_BLOCK3XX
#
# *** To enable VoiceMail routing execute:
#     - define WITH_VOICEMAIL
#     - set the value of voicemail.srv_ip
#     - adjust the value of voicemail.srv_port
#
# *** To enhance accounting execute:
#     - enable mysql
#     - define WITH_ACCDB
#     - add following columns to database
#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!define DBURL "mysql://openser:openserrw@localhost/openser"
#!endif
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

#!define WITH_NAT
#!define WITH_PSTN
#!define WITH_TLS

#####!define WITH_DEBUG

####### Defined Values #########

####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=2
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

/* uncomment the next line to disable TCP (default on) */
#disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
#auto_aliases=no

/* add local domain aliases */
#alias="sip.mydomain.com"

/* uncomment and configure the following line if you want Kamailio to 
   bind on a specific interface/port/proto (default bind on all available) */

listen=udp:127.0.0.1:5060
listen=udp:10.164.133.200:5060
listen=udp:10.164.133.200:25060

listen=tcp:10.164.133.200:5060
listen=tcp:127.0.0.1:5060

listen=tls:10.164.133.200:5061

#listen=sctp:(vlan1,vlan4)
#
#force_send_socket(63.144.144.95:5060);

#mhomed=1

/* port to listen to
 * - can be specified more than once if needed to listen on many ports */
#port=5060
#port=25060

#!ifdef WITH_TLS
enable_tls=yes
#!endif

enable_sctp = 0
sctp_autoclose = 86400 
sctp_send_retries = 1
sctp_srto_min = 1000

#default number of open files(fd's), is 1024 so increasing it to 65535
open_files_limit=65535

##Maximum number of tcp connections was set to 2048 which is default so increasing it to 12k
tcp_max_connections=12000


# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605
tcp_crlf_ping = yes

####### Custom Parameters #########

# These parameters can be modified runtime via RPC interface
# - see the documentation of 'cfg_rpc' module.
#
# Format: group.id = value 'desc' description
# Access: $sel(cfg_get.group.id) or @cfg_get.group.id
#

# This defines the UDP forward address where Asterisk is listening
# for SCTP to UDP messages
gateway.destination = "" desc "IP addr of the gateway"
gateway.enables = 1 desc "enable/disable the gateway"

#!ifdef WITH_PSTN
# PSTN GW Routing
#
# - pstn.gw_ip: valid IP or hostname as string value, example:
pstn.gw_ip = "" desc "My PSTN GW Address"
#
# - by default is empty to avoid misrouting
#pstn.gw_ip = "69.15.99.20" desc "PSTN GW Address"
#!endif

#!ifdef WITH_VOICEMAIL
# VoiceMail Routing on offline, busy or no answer
#
# - by default Voicemail server IP is empty to avoid misrouting
voicemail.srv_ip = "" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules_k:modules"
#!else
mpath="/usr/local/lib64/kamailio/modules_k/:/usr/local/lib64/kamailio/modules/"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "htable.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpproxy.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

# ----------------- setting module-specific parameters ---------------


# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 220sec
modparam("tm", "fr_inv_timer", 120000)

modparam("tm", "max_inv_lifetime", 300000)

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to1allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)
# max value for expires of registrations
#modparam("registrar", "max_expires", 3600)


# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra", 
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif


# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif


# ----- speedial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif


# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
# use caching
modparam("domain", "db_mode", 1)
# register callback to match myself condition with domains list
modparam("domain", "register_myself", 1)
#!endif


#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif


#!ifdef WITH_NAT
# ----- rtpproxy params -----
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif


#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/usr/local/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
#modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
modparam("htable", "htable", "acalls=>size=8;")
#!endif
modparam("htable", "htable", "acalls=>size=8;autoexpire=7200")

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level", 1)
modparam("debugger", "log_facility", "LOG_DAEMON")
#!endif

####### Routing Logic ########
####### MCP Michael Speanburg ########
loadmodule "regex.so"
loadmodule "dispatcher.so"

# max time to allow between registrations
modparam("dispatcher", "ds_time_to_live", 6)
#modparam("dispatcher", "dstid_avp", "$avp(dsdstid)")
# time between registrations
modparam("registrar","min_expires",3)
modparam("registrar", "default_expires", 3)
modparam("registrar","max_expires",4)

modparam("regex", "file", "/usr/local/etc/kamailio/regex_groups")

route {
    xlog("L_DEBUG", "SIP_METHOD: method [$rm] \n");
    $var(c)=" ";



    # added below to RR the SIP Message so that it will get equally distributed
    # mas's
    #if(is_method("MESSAGE"))  {
     #        if(!ds_select_dst("1", "4")) {
            #if we are here that means no destination is available. We notify the user by 404 and exit the script.
    #        xlog("L_NOTICE", "MESSAGE No destination available!");
    #        send_reply("404", "No destination");
    #        exit;
    #    }
    #    record_route();
    #    t_relay();
    #    xlog("L_INFO", "Routing MESSAGE  to <$ru> via <$du>\n");
    #    exit;
    #}

    # adding logic here to stop some hackers
    if( ((is_method("INVITE")) || (is_method("REGISTER"))) && (! pcre_match_group("$ua", 0)) )
    {
      if ((!pcre_match_group("$si", 2))) {
        # if nothing matches exit..
        xlog("L_INFO", "Unknown User-Agent: method [$rm] from [$fu] to [$tu] ruri [$ruri]\n");
        xlog("L_INFO", "Unknown User-Agent: [$ua] exiting!!!! \n");
        exit;
      } 
    }

#
#    if( (is_method("REGISTER")) && (pcre_match("$fU", "service")) ) {
#       xlog("L_DEBUG", "REGISTERING:[$ua] From User [$fU] From [$fu]  \n");
#       sl_send_reply("200", "ok");
#       exit;
#    }
    
    # check to see if its our MAS registering for the VAP
    if( (is_method("REGISTER")) && (pcre_match("$ua", "(?i)^Cafe")) ) 
    {
       # update registry
       xlog("L_DEBUG", "REGISTERING XXX:[$ua] \n");
       save("asterisk","0x01");
       # save this MAS in set 1
       ds_save("1");
       exit;
    } 
 
# if (ds_is_in_list("$si", "$sp")) {
# source IP:PORT is in a dispatcher list
# }
# if (ds_is_in_list("$rd", "$rp", "2")) {
# source RURI (ip and port) is in the dispatcher list id "2"
# } 

    # see if we want to capture the Record-Route  
    if( (is_method("INVITE"))  && (!ds_is_from_list("1")) )
    {
        xlog("L_INFO", "Record-Route length is [$(hdr(Record-Route){s.len})]\n");
        if ($(hdr(Record-Route){s.len}) > 1)
        {
           $sht(acalls=>$ci) = $hdr(Record-Route);
        } 
        # This timeout parameter might be needed later on
        #$shtex(a->$ci) = 120;
        #sht_print();
     }

     # FOR CR 222306 - CaFe VAP kamailio cfg does not have OPTIONS support
     # Below is added  - To avoid Failures for TelcoBridge
     # When it tries to query VAP with OPTIONS Request
     if(is_method("OPTIONS")) 
     {
         #send reply for each options request
         sl_send_reply("200", "ok");
         exit;
     }
 
     #if((proto==TCP) &&  ( (src_ip != ( $sel(cfg_get.pstn.gw_ip)) )))
     if ( ((proto==TCP) || (proto==TLS)) &&  (!ds_is_from_list("1")))
     {
        xlog("L_INFO", "SIP_METHOD: method [$rm] \n");
        #xlog("L_INFO", "TCP_AND_NOT_MYSELF: Handling TCP message\n");
        xlog("L_INFO", "TCP_AND_NOT_MYSELF: method [$rm] from [$fu] to [$tu] ruri [$ruri]\n");
        xlog("L_INFO", "TCP_AND_NOT_MYSELF: fromuser [$fU] touser [$tU] uri domain [$fd]  todomain [$td]  port [$rp]\n");

        # grant Route routing if route headers present
        if ( has_totag() )
        {
           if (loose_route())
           {
              t_relay();
              xlog("L_INFO", "TCP_AND_NOT_MYSELF: Routing message in session to <$ru> via <$du>\n");
              exit;
           }
        }
 
        if(!ds_select_dst("1", "0"))
        {
            #if we are here that means no destination is available. We notify the user by 404 and exit the script.
            xlog("L_NOTICE", "No destination available!");
            send_reply("404", "No destination");
            exit;
        }
        xlog("L_INFO", "Routing call to <$ru> via <$du>\n");

        # need to select the next server fromt he list and modify the transport
        $du = $du +";transport=udp";
        #$du = "sip:"+ $sel(cfg_get.gateway.destination) +";transport=udp";

        record_route();
        t_relay();
        xlog("L_INFO", "TCP_AND_NOT_MYSELF: SIP Destination URI [$du]\n");
     }
     #Following use case is not likely unless we generate a TCP message from Asterisk.
     #else if( (proto==TCP) && ( (src_ip == ( $sel(cfg_get.pstn.gw_ip)))) )
     else if( ((proto==TCP) || (proto==TLS)) && (ds_is_from_list("1")) )
     {
        xlog("L_INFO", "TCP_AND_MYSELF: fromuser [$fU] touser [$tU] uri domain [$fd] todomain [$td]  port [$rp]\n");
        $var(a) = "sip:" + $td +":"+ $rp +";transport=tcp";
        $du = $var(a);
        record_route();
        t_relay();
        xlog("L_INFO", "TCP_AND_MYSELF: SIP Destination URI [$du]\n");
     }
     # message from Asterisk going out. like BYE or INVITE
     #else if( (proto==UDP) && ( (src_ip == ( $sel(cfg_get.pstn.gw_ip)))) )
     else if( (proto==UDP) && (ds_is_from_list("1")) )
     {
        xlog("L_INFO", "UDP_AND_MYSELF: method [$rm] from [$fu] to [$tu] ruri [$ruri] Domain in R-URI [$rd] \n");
        xlog("L_INFO", "UDP_AND_MYSELF: fromuser [$fU] touser [$tU] uri domain [$fd] todomain [$td]  port [$rp] Transport [$rP] \n");

        # if it is a locally generated BYE then check and see if we have stored
        # Route-header in hashtable, if we found then insert a Route Header else
        # don't, let the transport take care of it below
        if ((is_method("BYE")) && ($rP != "tcp"))
        {
           xlog("L_INFO", "UDP_AND_MYSELF: CallId [$ci]\n"); 
           # look up from htable with current callID as Key
           $var(e) = $sht(acalls=>$ci);
           xlog("L_INFO", "UDP_AND_MYSELF: Retrieved CallId: [$ci], Route-Header: [$var(e)]\n"); 
           # sht_print();
           # this will be the first SIP header inserted
           if ($(var(e){s.len}) > 1)
           {
              xlog("L_INFO", "UDP_AND_MYSELF: Retrieved CallId length > 1: [$ci], Route-Header: [$var(e)]\n"); 
              #insert_hf("Route: $var(e)\r\n");
              # modify the du with from domain
	      remove_hf_re("^Route");
	      insert_hf("Route: $var(e)\r\n");
              $var(c)=$fd;
           }
        }

	#if($hdr(X-Asterisk-cafe-outdial-originaltransport) == "tls") {
		#xlog("L_INFO", "UDP_AND_MYSELF: Iphone touser ***** tls \n");
	#}

        if ( ( $td == "208.93.226.108" ) )
        {
           xlog("L_INFO", "UDP_AND_MYSELF: Guest touser [$tU]  todomain [$td]  port [$rp]\n");
           $var(b)="transport=udp;";
           $var(c) = $rd;
        }
        else if ( (remove_hf_re("^X-Asterisk-cafe-outdial-originaltransport")) || ( $rP == "tcp") || ( $rP == "TCP") || ( $rP == "tls") || ( $rP == "TLS") )
        {
           # All headers starting with "X-Asterisk-cafe" removed
           xlog("L_INFO", "UDP_AND_MYSELF: X-Asterisk-cafe\ Transport [$rP] \n");
           xlog("L_INFO", "UDP_AND_MYSELF: myIDs touser [$tU]\n");

	   if($hdr(X-Asterisk-cafe-outdial-originaltransport) == "tls") {
                xlog("L_INFO", "UDP_AND_MYSELF: myIDS touser ***** tls \n");
		$var(b)="transport=tls;";
           } else {
              xlog("L_INFO", "UDP_AND_MYSELF: myIDs touser ***** tcp \n");
              $var(b)="transport=tcp;";
	   }
           $var(c) = $rd;
           xlog("L_INFO", "TLS_NOT_AND_MYSELF: Secure myIDS user destination assigned var [$var(c)] \n");
        }
        else
        {
            xlog("L_INFO", "UDP_AND_MYSELF: Android touser [$tU]\n");
            $var(b)="transport=udp;";
            if($(var(c){s.len}) > 1)
            {
               xlog("L_INFO", "UDP_AND_MYSELF: Android touser destination assigned [$tU] var [$var(c)] \n");
            }
            else
            {
               $var(c) = " "; 
               xlog("L_INFO", "UDP_AND_MYSELF: Android NULLtouser [$tU] var [$var(c)] \n");
               $var(c) = $rd;
               xlog("L_INFO", "UDP_AND_MYSELF: Android touser [$tU] var [$var(c)] \n");
            }
        }
        #$var(a) = "sip:" + $td +":"+ $rp +";" + $var(b);
        #$var(a) = "sip:" + $rd +":"+ $rp +";" + $var(b);
        $var(a) = "sip:" + $var(c) +":"+ $rp +";" + $var(b);
        $du = $var(a);
        record_route();
        t_relay();
        xlog("L_INFO", "UDP_AND_MYSELF: SIP Destination URI [$du]\n");
        # only print if exists
        if ($(hdr(Route){s.len}) > 0)
        {
           xlog("L_INFO", "UDP_AND_MYSELF: ROUTE [$hdr(Route)]\n");
        }
     }
     # UDP from outside just pass it on to Asterisk
     #else if( (proto==UDP) && ( (src_ip != ( $sel(cfg_get.pstn.gw_ip)))) )
     else if( (proto==UDP) && (!ds_is_from_list("1")) )
     {
        xlog("L_INFO", "UDP_AND_NOT_MYSELF: Pass it to Asterisk\n");
        xlog("L_INFO", "UDP_AND_NOT_MYSELF: method [$rm] from [$fu] to [$tu] ruri [$ruri]\n");
        xlog("L_INFO", "UDP_AND_NOT_MYSELF: fromuser [$fU] touser [$tU] uri domain [$fd]  todomain [$td]  port [$rp]\n");
        #save the to domain
        #$var(c) = $td;

        # grant Route routing if route headers present
        if ( has_totag() )
        {
           if (loose_route())
           {
              t_relay();
              xlog("L_INFO", "TCP_AND_NOT_MYSELF: Routing message in session to <$ru> via <$du>\n");
              exit;
           }
        }

        #if (is_method("CANCEL") || is_method("BYE"))
        #{
        #    xlog("L_INFO", "UDP_AND_NOT_MYSELF: Routing call to <$ru> via <$du>\n");
        #    record_route();
        #    t_relay();
        #    exit;
        #}

        if(!ds_select_dst("1", "0"))
        {
            #if we are here that means no destination is available. We notify the user by 404 and exit the script.
            xlog("L_NOTICE", "No destination available!");
            send_reply("404", "No destination");
            exit;
        }
        xlog("L_INFO", "UDP_AND_NOT_MYSELF: Routing call to <$ru> via <$du>\n");
        record_route();
        t_relay();
        xlog("L_INFO", "SIP UDP Destination URI [$du]\n");
     }
     else
     {
         xlog("L_INFO", "Unknown SIP_Request: method [$rm] from [$fu] to [$tu] ruri [$ruri]\n");
     }
}
